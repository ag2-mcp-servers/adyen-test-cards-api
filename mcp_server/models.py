# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:08:27+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class AvsAddress(BaseModel):
    streetAddress: str = Field(
        ...,
        description='The street and house number of the address.\n\nExample: 1 Infinite Loop, Cupertino.',
    )
    zip: Optional[str] = Field(
        None, description='The zip or post code of the address.\n\nExample: CA 95014'
    )


class ServiceError(BaseModel):
    errorCode: Optional[str] = Field(
        None, description='The error code mapped to the error message.'
    )
    errorType: Optional[str] = Field(None, description='The category of the error.')
    message: Optional[str] = Field(
        None, description='A short explanation of the issue.'
    )
    pspReference: Optional[str] = Field(
        None, description='The PSP reference of the payment.'
    )
    status: Optional[int] = Field(None, description='The HTTP response status.')


class ExpiryMonth(Enum):
    APRIL = 'APRIL'
    AUGUST = 'AUGUST'
    DECEMBER = 'DECEMBER'
    FEBRUARY = 'FEBRUARY'
    JANUARY = 'JANUARY'
    JULY = 'JULY'
    JUNE = 'JUNE'
    MARCH = 'MARCH'
    MAY = 'MAY'
    NOVEMBER = 'NOVEMBER'
    OCTOBER = 'OCTOBER'
    SEPTEMBER = 'SEPTEMBER'


class ThreeDDirectoryServerResponse(Enum):
    N = 'N'
    U = 'U'
    Y = 'Y'


class TestCardRange(BaseModel):
    address: Optional[AvsAddress] = Field(
        None,
        description='Contains the billing address of the card holder. The address details need to be AVS-compliant, which means that you need to provide at least street address.',
    )
    cardHolderName: str = Field(
        ...,
        description='The name of the card holder, as it appears on the card, for the test card range.',
    )
    cvc: Optional[str] = Field(
        None, description='The test card range security code.\n\nExample: 123'
    )
    expiryMonth: ExpiryMonth = Field(
        ...,
        description='Expiry month for the test card range.\n\nAllowed values:\n* JANUARY\n* FEBRUARY\n* MARCH\n* APRIL\n* MAY\n* JUNE\n* JULY\n* AUGUST\n* SEPTEMBER\n* OCTOBER\n* NOVEMBER\n* DECEMBER',
    )
    expiryYear: int = Field(
        ..., description='Expiry year for the test card range.\n\nExample: 2020'
    )
    rangeEnd: str = Field(
        ...,
        description='The last test card number in the test card range (inclusive):\n\n* Min 6, max 19 digits\n* BIN compliant\nExample: 5432 1234 1234 4321',
    )
    rangeStart: str = Field(
        ...,
        description='The first test card number in the test card range (inclusive):\n\n* Min 6, max 19 digits\n* BIN compliant\nExample: 5432 1234 1234 1234',
    )
    threeDDirectoryServerResponse: Optional[ThreeDDirectoryServerResponse] = Field(
        None,
        description='3D Secure server response. It notifies whether the specified card holder is enrolled in a 3D Secure service. Possible values:\n\n* Y (Authentication available)\n* N (Card holder not enrolled/not participating)\n* U (Unable to authenticate)',
    )
    threeDPassword: Optional[str] = Field(
        None, description='The password used for 3D Secure authentication.'
    )
    threeDUsername: Optional[str] = Field(
        None, description='The username used for 3D Secure authentication.'
    )


class CreationResultCode(Enum):
    ALREADY_EXISTS = 'ALREADY_EXISTS'
    CREATED = 'CREATED'
    ERROR = 'ERROR'


class TestCardRangeCreationResult(BaseModel):
    cardNumberRangeEnd: str = Field(
        ...,
        description='The last test card number in the generated test card range.\n\nExample: 5432 1234 1234 4321',
    )
    cardNumberRangeStart: str = Field(
        ...,
        description='The first test card number in the generated test card range.\n\nExample: 5432 1234 1234 1234',
    )
    creationResultCode: CreationResultCode = Field(
        ...,
        description='Notification message. It informs about the outcome of the operation. Possible values:\n* CREATED\n* ALREADY_EXISTS\n* ERROR',
    )
    message: Optional[str] = Field(
        None, description='An optional information message about the result.'
    )


class CreateTestCardRangesRequest(BaseModel):
    accountCode: str = Field(
        ...,
        description='The code of the account, for which the test card ranges should be created.',
    )
    accountTypeCode: str = Field(
        ...,
        description='The type of the account, for which the test card ranges should be created.\n\nPermitted values:\n* Company\n* MerchantAccount\n> These values are case-sensitive.',
    )
    testCardRanges: List[TestCardRange] = Field(
        ..., description='A list of test card ranges to create.'
    )


class CreateTestCardRangesResult(BaseModel):
    rangeCreationResults: List[TestCardRangeCreationResult] = Field(
        ..., description='The results of the test card creation.'
    )
